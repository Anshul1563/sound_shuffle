generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model album {
  id           String    @id @unique @default(uuid())
  name         String
  images       Json[]    @db.Json
  release_date DateTime? @db.Date
  tracks       String[]
  artist_id    String?
  artist       artist?   @relation(fields: [artist_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  track        track[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model artist {
  name       String?
  images     Json[]   @db.Json
  genres     String[]
  popularity BigInt?
  albums     String[]
  tracks     String[]
  id         String   @id @unique @default(uuid())
  album      album[]
  track      track[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model playlist {
  id      String           @id @unique @default(uuid())
  name    String
  likes   Int              @default(0)
  tracks  PlaylistTracks[]
  user_id Int?
  user    user?            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model PlaylistTracks {
  track      track    @relation(fields: [trackId], references: [id],onDelete: Cascade, onUpdate: NoAction)
  trackId    String 
  playlist   playlist @relation(fields: [playlistId], references: [id],onDelete: Cascade, onUpdate: NoAction)
  playlistId String 
  addedAt    DateTime @default(now())

  @@id([trackId, playlistId])
}

model track {
  id        String           @id @unique @default(uuid())
  name      String
  duration  BigInt?
  url       String?
  artist_id String?
  album_id  String?
  album     album?           @relation(fields: [album_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  artist    artist?          @relation(fields: [artist_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  playlist  PlaylistTracks[]
}

model user {
  id           Int        @id(map: "User_pkey") @default(autoincrement())
  email        String     @unique(map: "User_email_key")
  name         String
  passwordHash String
  playlist     playlist[]
}
